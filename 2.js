console.log("Завдання: 2 ==============================");

// Створюємо функцію task2
function task2() {
  // Створюємо функцію promise1
  const promise1 = new Promise((resolve) => {
    // Повертаємо новий проміс
    // Використовуємо setTimeout для імітації асинхронної операції, яка завершується через 2 секунди.
    setTimeout(() => {
      resolve("Проміс 1 виконано");
    }, 2000);
  });
  // Після 2 секунд викликаємо resolve з результатом проміса, який є рядком "Проміс 1 виконано"
  // Створюємо функцію promise2
  const promise2 = new Promise((resolve) => {
    // Повертаємо новий проміс
    // Використовуємо setTimeout для імітації асинхронної операції, яка завершується через 5 секунди.
    setTimeout(() => {
      resolve("Проміс 2 виконано");
    }, 5000);
  });
  // Після 5 секунд викликаємо resolve з результатом проміса, який є рядком "Проміс 2 виконано"
  // Використовуємо Promise.race для визначення, який проміс виконується першим.
  Promise.race([promise1, promise2])
    .then((result) => {
      // Метод повертає новий проміс, який вирішується або відхиляється негайно після розв'язання або відхилення будь-якого з промісів у переданому списку.
      // У разі успіху виводимо результат
      console.log(result);
    })
    .catch((error) => {
      // У разі помилки виводимо повідомлення про помилку
      console.error("Помилка:", error);
    })
    .finally(() => {
      // Незалежно від результату, виводимо повідомлення про завершення обробки промісів, який є рядом "Завдання 2 завершено"
      console.log("Завдання 2 завершено");
    });
}

// Викликаємо функцію task2
task2();
